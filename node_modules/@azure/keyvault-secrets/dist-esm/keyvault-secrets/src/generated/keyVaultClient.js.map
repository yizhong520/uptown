{"version":3,"file":"keyVaultClient.js","sourceRoot":"","sources":["../../../../src/generated/keyVaultClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { KeyVaultClientContext } from \"./keyVaultClientContext\";\nimport {\n  KeyVaultClientOptionalParams,\n  ApiVersion73,\n  SetSecretOptionalParams,\n  SetSecretResponse,\n  DeleteSecretOptionalParams,\n  DeleteSecretResponse,\n  UpdateSecretOptionalParams,\n  UpdateSecretResponse,\n  GetSecretOptionalParams,\n  GetSecretResponse,\n  GetSecretsOptionalParams,\n  GetSecretsResponse,\n  GetSecretVersionsOptionalParams,\n  GetSecretVersionsResponse,\n  GetDeletedSecretsOptionalParams,\n  GetDeletedSecretsResponse,\n  GetDeletedSecretOptionalParams,\n  GetDeletedSecretResponse,\n  PurgeDeletedSecretOptionalParams,\n  RecoverDeletedSecretOptionalParams,\n  RecoverDeletedSecretResponse,\n  BackupSecretOptionalParams,\n  BackupSecretResponse,\n  RestoreSecretOptionalParams,\n  RestoreSecretResponse,\n  GetSecretsNextOptionalParams,\n  GetSecretsNextResponse,\n  GetSecretVersionsNextOptionalParams,\n  GetSecretVersionsNextResponse,\n  GetDeletedSecretsNextOptionalParams,\n  GetDeletedSecretsNextResponse\n} from \"./models\";\n\n/** @internal */\nexport class KeyVaultClient extends KeyVaultClientContext {\n  /**\n   * Initializes a new instance of the KeyVaultClient class.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    apiVersion: ApiVersion73,\n    options?: KeyVaultClientOptionalParams\n  ) {\n    super(apiVersion, options);\n  }\n\n  /**\n   *  The SET operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure\n   * Key Vault creates a new version of that secret. This operation requires the secrets/set permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param options The options parameters.\n   */\n  setSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    value: string,\n    options?: SetSecretOptionalParams\n  ): Promise<SetSecretResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      value,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      setSecretOperationSpec\n    ) as Promise<SetSecretResponse>;\n  }\n\n  /**\n   * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied to an\n   * individual version of a secret. This operation requires the secrets/delete permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The options parameters.\n   */\n  deleteSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: DeleteSecretOptionalParams\n  ): Promise<DeleteSecretResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      deleteSecretOperationSpec\n    ) as Promise<DeleteSecretResponse>;\n  }\n\n  /**\n   * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that are\n   * not specified in the request are left unchanged. The value of a secret itself cannot be changed.\n   * This operation requires the secrets/set permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param options The options parameters.\n   */\n  updateSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: UpdateSecretOptionalParams\n  ): Promise<UpdateSecretResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      secretVersion,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      updateSecretOperationSpec\n    ) as Promise<UpdateSecretResponse>;\n  }\n\n  /**\n   * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires the\n   * secrets/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret. This URI fragment is optional. If not specified, the\n   *                      latest version of the secret is returned.\n   * @param options The options parameters.\n   */\n  getSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    secretVersion: string,\n    options?: GetSecretOptionalParams\n  ): Promise<GetSecretResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      secretVersion,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getSecretOperationSpec\n    ) as Promise<GetSecretResponse>;\n  }\n\n  /**\n   * The Get Secrets operation is applicable to the entire vault. However, only the base secret\n   * identifier and its attributes are provided in the response. Individual secret versions are not\n   * listed in the response. This operation requires the secrets/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The options parameters.\n   */\n  getSecrets(\n    vaultBaseUrl: string,\n    options?: GetSecretsOptionalParams\n  ): Promise<GetSecretsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getSecretsOperationSpec\n    ) as Promise<GetSecretsResponse>;\n  }\n\n  /**\n   * The full secret identifier and attributes are provided in the response. No values are returned for\n   * the secrets. This operations requires the secrets/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The options parameters.\n   */\n  getSecretVersions(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: GetSecretVersionsOptionalParams\n  ): Promise<GetSecretVersionsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getSecretVersionsOperationSpec\n    ) as Promise<GetSecretVersionsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled for\n   * soft-delete. This operation requires the secrets/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The options parameters.\n   */\n  getDeletedSecrets(\n    vaultBaseUrl: string,\n    options?: GetDeletedSecretsOptionalParams\n  ): Promise<GetDeletedSecretsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getDeletedSecretsOperationSpec\n    ) as Promise<GetDeletedSecretsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.\n   * This operation requires the secrets/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The options parameters.\n   */\n  getDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: GetDeletedSecretOptionalParams\n  ): Promise<GetDeletedSecretResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getDeletedSecretOperationSpec\n    ) as Promise<GetDeletedSecretResponse>;\n  }\n\n  /**\n   * The purge deleted secret operation removes the secret permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires\n   * the secrets/purge permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The options parameters.\n   */\n  purgeDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: PurgeDeletedSecretOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      purgeDeletedSecretOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Recovers the deleted secret in the specified vault. This operation can only be performed on a\n   * soft-delete enabled vault. This operation requires the secrets/recover permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param options The options parameters.\n   */\n  recoverDeletedSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: RecoverDeletedSecretOptionalParams\n  ): Promise<RecoverDeletedSecretResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      recoverDeletedSecretOperationSpec\n    ) as Promise<RecoverDeletedSecretResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified secret be downloaded to the client. All versions of the\n   * secret will be downloaded. This operation requires the secrets/backup permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The options parameters.\n   */\n  backupSecret(\n    vaultBaseUrl: string,\n    secretName: string,\n    options?: BackupSecretOptionalParams\n  ): Promise<BackupSecretResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      backupSecretOperationSpec\n    ) as Promise<BackupSecretResponse>;\n  }\n\n  /**\n   * Restores a backed up secret, and all its versions, to a vault. This operation requires the\n   * secrets/restore permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param options The options parameters.\n   */\n  restoreSecret(\n    vaultBaseUrl: string,\n    secretBundleBackup: Uint8Array,\n    options?: RestoreSecretOptionalParams\n  ): Promise<RestoreSecretResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretBundleBackup,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      restoreSecretOperationSpec\n    ) as Promise<RestoreSecretResponse>;\n  }\n\n  /**\n   * GetSecretsNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param nextLink The nextLink from the previous successful call to the GetSecrets method.\n   * @param options The options parameters.\n   */\n  getSecretsNext(\n    vaultBaseUrl: string,\n    nextLink: string,\n    options?: GetSecretsNextOptionalParams\n  ): Promise<GetSecretsNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getSecretsNextOperationSpec\n    ) as Promise<GetSecretsNextResponse>;\n  }\n\n  /**\n   * GetSecretVersionsNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param nextLink The nextLink from the previous successful call to the GetSecretVersions method.\n   * @param options The options parameters.\n   */\n  getSecretVersionsNext(\n    vaultBaseUrl: string,\n    secretName: string,\n    nextLink: string,\n    options?: GetSecretVersionsNextOptionalParams\n  ): Promise<GetSecretVersionsNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      secretName,\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getSecretVersionsNextOperationSpec\n    ) as Promise<GetSecretVersionsNextResponse>;\n  }\n\n  /**\n   * GetDeletedSecretsNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param nextLink The nextLink from the previous successful call to the GetDeletedSecrets method.\n   * @param options The options parameters.\n   */\n  getDeletedSecretsNext(\n    vaultBaseUrl: string,\n    nextLink: string,\n    options?: GetDeletedSecretsNextOptionalParams\n  ): Promise<GetDeletedSecretsNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      vaultBaseUrl,\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getDeletedSecretsNextOperationSpec\n    ) as Promise<GetDeletedSecretsNextResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst setSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/secrets/{secret-name}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      value: [\"value\"],\n      tags: [\"options\", \"tags\"],\n      contentType: [\"options\", \"contentType\"],\n      secretAttributes: [\"options\", \"secretAttributes\"]\n    },\n    mapper: { ...Mappers.SecretSetParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/secrets/{secret-name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/secrets/{secret-name}/{secret-version}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      contentType: [\"options\", \"contentType\"],\n      secretAttributes: [\"options\", \"secretAttributes\"],\n      tags: [\"options\", \"tags\"]\n    },\n    mapper: { ...Mappers.SecretUpdateParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1,\n    Parameters.secretVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/secrets/{secret-name}/{secret-version}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1,\n    Parameters.secretVersion\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSecretsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/secrets\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSecretVersionsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/secrets/{secret-name}/versions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedSecretsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/deletedsecrets\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/deletedsecrets/{secret-name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst purgeDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/deletedsecrets/{secret-name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst recoverDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/deletedsecrets/{secret-name}/recover\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst backupSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/secrets/{secret-name}/backup\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupSecretResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.secretName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst restoreSecretOperationSpec: coreHttp.OperationSpec = {\n  path: \"/secrets/restore\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: { secretBundleBackup: [\"secretBundleBackup\"] },\n    mapper: { ...Mappers.SecretRestoreParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getSecretsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getSecretVersionsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedSecretsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}